import Pagination from '@/components/Pagination';
import ProductList from '@/components/ProductList';
import Tabs from '@/components/Tabs';
import { fetchCategories, fetchCategories1, fetchProducts } from '@/http/page';
import { ICategory, ICollectionResponse, IPagination, IProducts, IQueryOptions } from '@/types/page';
import { debounce,capitalizeFirstLetter,makeCategory } from '@/utils';
import { AxiosResponse } from 'axios';
import { GetServerSideProps, NextPage,GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import qs from 'qs';
import React from 'react'


interface IPropType{
  categories:{
    items:ICategory[];
    pagination:IPagination;
  },
  products:{
    items:IProducts[];
    pagination:IPagination;
  };
  slug: string;
}

const Category = ({categories,products,slug}:IPropType) => {
  const {page,pageCount}=products.pagination;
  const router=useRouter();
  const {category:categorySlug}=router.query;
  const formattedCategory=()=>{
    return capitalizeFirstLetter(makeCategory(slug));
  }
  const handleSearch=(query:string)=>{
    router.push(`/category/${categorySlug}/?search=${query}`)
  }

  return (
     <div>
    <Head>
        <title>BMS {formattedCategory()}</title>
        <meta name="description" content='Generated by create next app'/>
        <link rel="icons" href="/favicon.ico"/>
      </Head>

      <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch,500)}/>
      <ProductList products={products.items}/>
      <Pagination page={page} pageCount={pageCount} redirectUrl={`/category/${categorySlug}`}/>

  </div>
  )
  
    
};



export async function getServerSideProps(context:GetServerSidePropsContext){
const options:Partial<IQueryOptions>={
  populate:['Image.data'],
  sort:['id:asc'],
  filters:{
    category:{
      slug:context.query.category,
    },
  },
  pagination:{
    page:context.query.page ? +context.query.page : 1,
    pageSize:3,
  },
};
if(context.query.search){
  options.filters={
    Title:{
      $containsi:context.query.search,
    }
  }
}


  // console.log(context.query.search);

const queryString=qs.stringify(options);

const {
  data:products
}:AxiosResponse<ICollectionResponse<IProducts[]>>=await fetchProducts(queryString);


  const {
    data:categories
}:AxiosResponse<ICollectionResponse<ICategory[]>> =await fetchCategories1();
return {
    props:{
        categories:{
            items:categories.data,
            pagination:categories.meta.pagination,
        },
        products:{
          items:products.data,
          pagination:products.meta.pagination,

        }
    }
}
}
export default Category;